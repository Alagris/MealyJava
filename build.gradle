/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'antlr'
    id 'java'
}


version = '1.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task packageJavadoc(type: Jar) {
    from javadoc

    archiveClassifier.set('javadoc')
}
javadoc.failOnError = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact packageJavadoc
            groupId 'solomonoff'
            artifactId 'solomonoff'
            pom {
                name = "SolomonoffLib"
                description = "Transducer regular expression compiler"
                url = "https://github.com/aleksander-mendoza/SolomonoffLib"

                developers {
                    developer {
                        id = "aleksanderm"
                        name = "Aleksander Mendoza"
                        email = "aleksander.mendoza.drosik@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url = "$buildDir/repo"
        }
    }
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath

    options{
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true

        links "https://docs.oracle.com/javase/7/docs/api/"
    }
}


task cloneRepositoryBranch{
    doLast{
        exec{
            commandLine "rm"
            args = [ "-rf", "$buildDir/repo" ]
        }
        exec{
            commandLine "mkdir"
            args = [ "-p", "$buildDir/repo" ]
        }
        exec{
            commandLine "git"
            args = [ "clone", "-b" ,"repository", "git@github.com:Alagris/Pipeline.git", "$buildDir/repo" ]
        }
    }
}



task commitRepositoryBranch(){c
    doLast{
        exec{
            workingDir "$buildDir/repo"
            commandLine "git"
            args = [ "add", "." ]
        }
        exec{
            workingDir "$buildDir/repo"
            commandLine "git"
            args = [ "commit" ,"-m", "Publishing $version" ]
        }
        exec{
            workingDir "$buildDir/repo"
            commandLine "git"
            args = [ "push", "origin", "repository" ]
        }
    }
}

task publishToGit(){
    dependsOn 'test'
    dependsOn 'cloneRepositoryBranch'
    dependsOn 'publish'
    dependsOn 'commitRepositoryBranch'
}


jar {
    manifest {
        attributes 'Main-Class': 'net.alagris.Compiler'
    }
}


task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': "net.alagris.CLI"
    }
    archiveBaseName.set("${rootProject.name}")
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}
dependencies {
    antlr "org.antlr:antlr4:4.7.1"
    compile "org.antlr:antlr4-runtime:4.7.1"
    
    testCompile("junit:junit:4.12")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")

    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M4")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")

    // Enable use of the JUnitPlatform Runner within the IDE
    testCompile("org.junit.platform:junit-platform-runner:1.0.0-M4")
    
    compile group: 'net.automatalib.distribution', name: 'automata-distribution', version: '0.9.0'

}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-visitor', '-package', 'net.alagris']
    outputDirectory = new File("generated-src/antlr/main/net/alagris".toString())
}

sourceSets.main.java.srcDirs += 'generated-src/antlr/main/'

clean{
    delete "generated-src"
}
test {
    useJUnitPlatform()
}
