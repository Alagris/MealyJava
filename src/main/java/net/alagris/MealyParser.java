/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.alagris;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.PrimitiveIterator.OfInt;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;

import net.alagris.GrammarBaseVisitor;
import net.alagris.GrammarLexer;
import net.alagris.GrammarParser;
import net.alagris.GrammarParser.AtomicLiteralContext;
import net.alagris.GrammarParser.AtomicNestedContext;
import net.alagris.GrammarParser.AtomicRangeContext;
import net.alagris.GrammarParser.AtomicVarIDContext;
import net.alagris.GrammarParser.EndConcatContext;
import net.alagris.GrammarParser.EndFuncsContext;
import net.alagris.GrammarParser.EndParamsContext;
import net.alagris.GrammarParser.EndUnionContext;
import net.alagris.GrammarParser.EpsilonProductContext;
import net.alagris.GrammarParser.Func_defContext;
import net.alagris.GrammarParser.KleeneClosureContext;
import net.alagris.GrammarParser.MoreConcatContext;
import net.alagris.GrammarParser.MoreFuncsContext;
import net.alagris.GrammarParser.MoreParamsContext;
import net.alagris.GrammarParser.MoreUnionContext;
import net.alagris.GrammarParser.NoKleeneClosureContext;
import net.alagris.GrammarParser.ProductContext;
import net.alagris.GrammarParser.StartContext;
import net.alagris.Regex.R;
import net.alagris.Simple.A;

public class MealyParser {
    static void repeat(StringBuilder sb, String s, int times) {
        while (times-- > 0) {
            sb.append(s);
        }
    }

    static void ind(StringBuilder sb, int indent) {
        repeat(sb, "    ", indent);
    }

    public static int escapeCharacter(int c) {
        switch (c) {
        case 'b':
            return '\b';
        case 'n':
            return '\n';
        case 'r':
            return '\r';
        case 't':
            return '\t';
        case 'f':
            return '\f';
        default:
            return c;
        }
    }

    interface AST {

    }

    static class Params implements AST {
        final ArrayList<String> params = new ArrayList<>();
    }

    static class Funcs implements AST {
        final ArrayList<Func> funcs = new ArrayList<>();

    }

    static class Func implements AST {
        final String name;
        final String[] vars;
        final Regex body;

        public Func(String name, String[] vars, Regex body) {
            this.name = name;
            this.vars = vars;
            this.body = body;
        }

    }

    private static class GrammarVisitor extends GrammarBaseVisitor<AST> {

        @Override
        public AST visitEndParams(EndParamsContext ctx) {
            return new Params();
        }

        @Override
        public AST visitMoreParams(MoreParamsContext ctx) {
            Params params = (Params) visit(ctx.params());
            params.params.add(ctx.ID().getText());
            return params;
        }

        @Override
        public AST visitEndFuncs(EndFuncsContext ctx) {
            return new Funcs();
        }

        @Override
        public AST visitMoreFuncs(MoreFuncsContext ctx) {
            Funcs funcs = (Funcs) visit(ctx.funcs());
            funcs.funcs.add((Func) visit(ctx.func_def()));
            return funcs;
        }

        @Override
        public AST visitFunc_def(Func_defContext ctx) {
            ArrayList<String> params = ((Params) visit(ctx.params())).params;
            return new Func(ctx.ID().getText(), params.toArray(new String[0]), (Regex) visit(ctx.mealy_union()));
        }

        @Override
        public AST visitEpsilonProduct(EpsilonProductContext ctx) {
            return visit(ctx.mealy_atomic());
        }

        @Override
        public AST visitAtomicVarID(AtomicVarIDContext ctx) {
            return new Simple.Var(ctx.ID().getText());
        }

        @Override
        public AST visitAtomicNested(AtomicNestedContext ctx) {
            return visit(ctx.mealy_union());
        }

        @Override
        public AST visitProduct(ProductContext ctx) {
            final String quotedLiteral = ctx.StringLiteral().getText();
            final String unquotedLiteral = quotedLiteral.substring(1, quotedLiteral.length()-1);
           
            return new Simple.Product((A) visit(ctx.mealy_atomic()), unquotedLiteral);
        }

        @Override
        public AST visitAtomicLiteral(AtomicLiteralContext ctx) {
            final String quotedLiteral = ctx.StringLiteral().getText();
            final String unquotedLiteral = quotedLiteral.substring(1, quotedLiteral.length()-1);
            return new Simple.Atomic(unquotedLiteral);
        }

        @Override
        public AST visitNoKleeneClosure(NoKleeneClosureContext ctx) {
            return visit(ctx.mealy_prod());
        }

        @Override
        public AST visitKleeneClosure(KleeneClosureContext ctx) {
            return new Simple.Kleene((A) visit(ctx.mealy_prod()));
        }

        @Override
        public AST visitEndConcat(EndConcatContext ctx) {
            return visit(ctx.mealy_Kleene_closure());
        }

        @Override
        public AST visitMoreConcat(MoreConcatContext ctx) {
            AST lhs = visit(ctx.mealy_Kleene_closure());
            AST rhs = visit(ctx.mealy_concat());
            return new Simple.Concat((A) lhs, (A) rhs);
        }

        @Override
        public AST visitAtomicRange(AtomicRangeContext ctx) {
            final int[] range = ctx.Range().getText().codePoints().toArray();
            final int from, to;
            // [a-b] or [\a-b] or [a-\b] or [\a-\b]
            if (range[1] == '\\') {
                // [\a-b] or [\a-\b]
                from = escapeCharacter(range[2]);
                if (range[4] == '\\') {
                    // [\a-\b]
                    to = escapeCharacter(range[5]);
                } else {
                    // [\a-b]
                    to = range[4];
                }
            } else {
                // [a-b] or [a-\b]
                from = range[1];
                if (range[3] == '\\') {
                    // [a-\b]
                    to = escapeCharacter(range[4]);
                } else {
                    // [a-b]
                    to = range[3];
                }
            }
            return new Simple.Range(from,to);
        }

        @Override
        public AST visitMoreUnion(MoreUnionContext ctx) {
            AST lhs = visit(ctx.mealy_concat());
            AST rhs = visit(ctx.mealy_union());
            return new Simple.Union((A) lhs, (A) rhs);
        }

        @Override
        public AST visitEndUnion(EndUnionContext ctx) {
            return visit(ctx.mealy_concat());
        }

        @Override
        public AST visitStart(StartContext ctx) {
            return super.visitStart(ctx);
        }
    }

    
    public static A parse(String source) {
        return parse(CharStreams.fromString(source));
    }
    public static A parse(CharStream source) {

        GrammarLexer lexer = new GrammarLexer(source);
        GrammarParser parser = new GrammarParser(new CommonTokenStream(lexer));
        GrammarVisitor visitor = new GrammarVisitor();
        return (A) visitor.visit(parser.mealy_union());
        

    }
}
